[[section: อุปกรณ์ที่ใช้ในการพัฒนา ]]
	[[subsection: อุปกรณ์ด้านซอฟต์แวร์ ]]
		[[subsubsection: Sublime text 3]]
			เป็นซอฟต์แวร์ที่ใช้สกำหรับแก้ไขข้อความ ใช้ในการเขียนโปรแกรมภาษาไพธอน 
		[[subsubsection: Android Studio]]
			ใช้ในการพัฒนาแอพพลิเคชั่นบนแอนดรอย
		[[subsubsection: Putty]]
			เป็นโปรแกรมที่ใช้ในการรีโมทไปยังบอร์ดเพื่อสั่งงานต่างๆ เช่นรันโปรแกรมภาษาไพธอน ใช้หยุดการทำงานบางอย่างบนบอร์ด
		[[subsubsection: WinSCP]]
			ใช้สำหรับการอัพโหลดไฟล์ไปยังบอร์ดผ่านโพรโตคอล SCP 
		[[subsubsection: XShell]]
			ลักษณะการใช้งานเหมือน [[ref(Putty)]] แต่มีความสามารถมากกว่า เช่นจดจำรหัสของผู้ใช้ หรือสามารถเรีโมทผ่าน ssh หลายๆแท็บได้
		[[subsubsection: Git]]
			เป็นซอฟต์แวร์เวอร์ชั่นคอนโทรล ทำหน้าที่จัดประวัติการเปลี่ยนแปลงไฟล์ ทำให้เรามาสามารถตรวจสอบความเปลี่ยนแปลงของงานได้
			ซึ่งการใช้ Git จะช่วยเพิ่มประสิทธิภาพในการทำงานได้โดยเฉพาะการทำงานเป็นทีม ซึ่งเราจะสามารถแชร์โคดร่วมกันและสามารถจัดการกับไฟล์ต่างๆร่วมกันได้
		[[subsubsection: Pytohn2.7]]
			ใช้ในการพัฒนาซอฟต์แวร์บนบอร์ด LinkIt smart 7688 Duo  

	[[subsection: อุปกรณ์ด้านฮาร์ดแวร์ ]]
		[[list]]
		# บอร์ด LinkIt smart 7688
		# DC Motor ขนาด 38 มม.
		# เซอร์โวมอเตอร์ 2 ตัว
		# กล้อง(รองรับ UVC)
		# แบตเตอรี่ 1500 mAh 1 ชิ้น
		[[end]]
\newpage

[[section: โครงสร้างการติดต่อสื่อสาร ]]
	การพัฒนาให้ตัวควบคุมสามารถควบคุมรถได้นั้นจำเป็นต้องมีการสร้างหรือกำหนดลักษณะเฉพาะของการสื่อสารขึ้ันมา 
	ซึ่งนอกเหนือจากเทคโนโลยีไวไฟที่ใช้เชื่อมต่อเซิฟเวอร์กับไคลแอนท์เข้าด้วยกันแล้ว 
	การแลกเปลี่ยนข้อมูลจริงๆนั้นจำเป็นต้องใช้ Socket Programing เพื่อสื่อสารและแลกเปลี่ยนข้อมูลกัน 
	ในโครงงานนี้ลือกใช้ TCP เป็นโพรโตคอลหลักในการสื่อสาร                         
	เพราะต้องการความน่าเชื่อถือและความแม่นยำในการรับ-ส่งข้อมูล

	[[image(TCPFlow):diagram/tcpflow.png|width=0.5|caption=ภาพการทำงานของ TCP]]
	*จาก [[ref(TCPFlow)]]* แสดงให้เห็นว่าการส่งข้อมูลผ่าน TCP นั้นมีการตรวจสอบความถูกก่อนทุกครั้ง 
	ด้วยการส่ง ACK, SYN ACK ก่อนส่งข้อมูลจริงทำให้ข้อมูลที่ส่งไปถึงผู้รับแน่นอน 
	และหากการส่งข้อมูลไม่สำเร็จผู้ส่งก็จะรับรู้ข้อผิดพลาดได้

	[[image(ChangeModeDataFlow):diagram/changemodeflow.png|width=1|caption=ตัวอย่างการสื่อสารเพื่อเปลี่ยนโหมดควบคุมเป็น Simulator ]]
\clearpage	

\newpage
	[[subsection: รูปแบบของข้อมูลที่ใช้ในการสื่อสาร ]]
		การส่งข้อมูลระหว่างไคลแอนท์ และเซิฟเวอร์มีรูปแบบเป็นข้อความเพื่อระบุคำสั่งให้ผู้รับนำไปประมวล ลักษณะข้อความที่ใช้ในระบบมี 2 แบบ ดังนี้
		[[subsubsection: Non-command ]]
			คือการส่งข้อความที่มีลักษณะยาวติดต่อกันไม่มีการเว้นวรรคประกอบด้วยส่วนหัวและตามด้วยค่าที่ต้องการ สามารถดูคำสั่งได้ที่ตาราง [[ref(NoncommandTable)]]
			\begin{table}[]
			\centering
			\caption{ตารางแสดงรูปแบบของ Non-command }
			\label{NoncommandTable}
			\begin{tabular}{|l|l|l|}
			\hline
			\multicolumn{1}{|c|}{ส่วนหัว} & \multicolumn{1}{c|}{ส่วนหาง} & \multicolumn{1}{c|}{คำอธิบาย}                                                                     \\ \hline
			a                             & 0-100                        & \begin{tabular}[c]{@{}l@{}}คำสั่งคันเร่งมีค่าเป็นจำนวนเต็ม 0 - 100\\ ตัวอย่าง a80\end{tabular}    \\ \hline
			b                             & 0-100                        & \begin{tabular}[c]{@{}l@{}}คำสั่งเบรคมีค่าเป็นจำนวนเต็ม 0 - 100\\ ตัวอย่าง b75\end{tabular}       \\ \hline
			t                             & 0-180                        & \begin{tabular}[c]{@{}l@{}}คำสั่งเลี้ยวมีค่าเป็นองศาจำนวนเต็ม 0 - 180\\ ตัวอย่าง t35\end{tabular} \\ \hline
			\end{tabular}
			\end{table}
		[[subsubsection: Command ]]
			มีลักษณะคล้ายกับคำสั่งในระบบปฏิบัติการ มีการแยกคำสั่งกับค่าที่ระบุด้วยการเว้นวรรค เช่น -cm SIM เป็นการส่งข้อความเพื่อขอเปลี่ยนโหมดควบคุม สามารถดูคำสั่งได้ที่ตาราง [[ref(CommandTable)]]
			\begin{table}[]
			\centering
			\caption{ตารางแสดงรูปแบบของ Command}
			\label{CommandTable}
			\begin{tabular}{|l|l|l|}
			\hline
			\multicolumn{1}{|c|}{คำสั่ง} & \multicolumn{1}{c|}{อาร์กิวเมนต์} & \multicolumn{1}{c|}{คำอธิบาย}                                                                                             \\ \hline
			-a                           & PHONE, SIMULATOR\_SET              & \begin{tabular}[c]{@{}l@{}}คำสั่งการยืนยันตัวตนของ\\ อุปกรณ์ที่เชื่อมต่อกับ Server\end{tabular}                           \\ \hline
			-cm                          & PH, SIM                           & \begin{tabular}[c]{@{}l@{}}คำสั่งเปลี่ยนโหมดการควบคุม\\ ตัวอย่าง -cm PHONE\end{tabular}                                   \\ \hline
			-cg                          & D, P, N, R                        & คำสั่งเปลี่ยนเกียร์ ตัวอย่าง -cg N                                                                                        \\ \hline
			-cc                          & 0 - 1                             & \begin{tabular}[c]{@{}l@{}}คำสั่งควบคุมกล้องมีหน่วยเป็น omega\\ มีค่าเป็นเลขทศนิยม 0 - 1 ตัวอย่าง -cc 0.333\end{tabular}  \\ \hline
			-ccp                         & 0 - 180                           & \begin{tabular}[c]{@{}l@{}}คำสั่งควบคุมกล้องมีหน่วยเป็นองศา\\ มีค่าเป็นเลขจำนวนเต็ม 0 - 180 ตัวอย่าง -ccp 93\end{tabular} \\ \hline
			\end{tabular}
			\end{table}
								
	[[subsection: ประเภทของการสื่อสาร ]]

		ในการสื่อสารและแลกเปลี่ยนข้อมูล ในบางเงื่อนไขของข้อมูลจะต้องมีการโต้ตอบกันระหว่างผู้ส่งและผู้รับ แต่ในบางครั้งก็ไม่เกิดการโต้ตอบกัน 
		กล่าวคือการส่งข้อมูลบางอย่างที่ผู้รับและผู้ส่งจะส่งข้อมูลหากันจากนั้นนำข้อมูลที่ได้ไปประมวลผล และตอบกลับไป 
		[[image(dataflow):diagram/dataflowcontrol01.jpg|width=0.7|caption=รูปแบบการทำงานของการส่งข้อมูลสองทางแบบสมบูรณ์]]
		
		[[subsubsection: การส่งข้อมูลแบบทางเดียว ]]
			ใช้กับการส่งคำสั่งควบคุมรถซึ่ง ไคลแอนท์เป็นผู้ส่งคำสั่งไปให้เซิฟเวอร์  แต่เซิฟเวอร์ไม่จำเป็นต้องส่งข้อความตอบกลับมา		
		[[subsubsection: การส่งข้อมูลสองทางแบบสมบูรณ์ ]]
			เป็นการส่งข้อมูลกันแบบที่ผู้ส่งจะได้รับข้อมูลตอบจากผู้รับเช่น การส่งข้อมูลเพื่อเปลี่ยนโหมดควบคุม เมื่อทำการเปลี่ยนโหมดสำเร็จเซฺฟเวอร์จะส่งข้อความกลับเพื่อให้อุปกรณ์โทรศัพท์ทำการอัพ UI 	
		[[subsubsection: การส่งข้อมูลสองทางแบบไม่สมบูรณ์ ]]
			การส่งข้อมูลสองทางแบบไม่สมบูรณ์ เป็นการส่งข้อมูลที่ผู้รับไม่ได้ตอบกลับไปยังผู้ส่ง เพราะเงื่อนไขของคำสั่งไม่ถูกต้อง เช่นทำการเปลี่ยนเกียร์ขณะใช้ความเร็ว เซิฟเวอร์จะไม่ตอบกลับไปยังไคลแอนท์		
		
			จากภาพ [[ref(dataflow)]], จะเห็นได้ว่าข้อมูลที่ผู้ส่งส่งไปนั้นจะผ่านการตรวจสอบที่ผู้รับก่อนที่จะมีการโต้ตอบกลับไปจึงเป็นการส่งข้อมูลแบบสองทางสมบูรณ์ ดังนั้นหากข้อมูลมีการส่งไปแล้วผู้รับไม่มีการตอบกลับ ก็จะถือว่าข้อมูลดังกล่าวถูกปฏิเสธจึงไม่มีการส่งข้อมูลกลับไป ซึ่งเป็นการส่งข้อมูลแบบสองทางไม่สมบูรณ์ 		
\clearpage

[[section: การพัฒนาแอพพลิเคชั่นแอนดรอย ]]
	[[subsection: การออกแบบ UX/UI]]
        การออกแบบ UI บนแอพพลิเคชั่นแอนดรอย ผู้พัฒนาได้จำลองสวนควบคุมรถที่สำคัญมาเป็นส่วนประกอบต่างๆบนหน้าจออุปกรณ์สมาร์ตโฟน ซึ่งได้แก่ เบรค คันเร่ง และเกียร์ 
		แต่ส่วนพวงมาลัยนั้นใช้เซนเซอร์ตรวจจับการเอียงแทน UI บนสมาร์ตโฟน
        นอกจากนี้ยังเพิ่มส่วนประกอบอื่นๆที่สำคัญเข้าไปคือ สวิทต์เปลี่ยนโหมดควบคุม และการแสดงผลภาพเคลื่อนไหวจากกล้องบนพื้นหลัง

		[[image(home_ui):app/homedes.jpg|width=0.25|caption=ภาพหน้าแรกของ แอพพลิเคชั่นแอนดรอย]]

    	[[subsubsection: Home Activity]]
			เป็นหน้าแรกใช้สำหรับเตรียมการเชื่อมต่อกับเซิฟเวอร์ มีส่วนประกอบดังนี้

			[[list]]
		    	# ช่องสำหรับกรอก IP มีค่าเริ่มต้นคือ 192.168.100.1 (จากภาพ [[ref(home_ui)]])
				# ปุ่มสำหรับกดเพื่อเชื่อมต่อกับรถ(เซิฟเวอร์) (จากภาพ [[ref(home_ui)]])
				# หากเชื่อมต่อไม่สำเร็จ จะปรากฏข้อความแจ้งเตือน (จากภาพ [[ref(home_ui2)]])
			[[end]]
			[[image(home_ui2):app/homedes2.jpg|width=0.25|caption=ข้อความแจ้งเตือนเมื่อไม่การเชื่อมต่อล้มเหลว]]
\clearpage

    	[[subsubsection: Control Activity]]  
			เป็นส่วนของการแสดงผลเพื่อจำลองส่วนควบคุมรถสามารถดูตัวอย่างได้จากภาพ [[ref(PhoneControlUI)]] และ [[ref(SimsetControlUI)]] ซึ่งมีส่วนประกอบดังนี้
			[[list]]
				# ชุดปุ่มสำหรับกดเปลี่ยนเกียร์
				# ปุ่มสไลด์สำหรับหมุนกล้อง
				# ปุ่มสำหรับสไลด์ ใช้ในควบคุมความเร็ว
				# สวิทต์สำหรับเปลี่ยนโหมด
				# พื้นหลังแสดงภาพเคลื่นไหวผ่าน HTTP Streaming ซึ่งรับภาพเคลื่นไหวมาจากกล้องที่ติดอยู่กับตัวรถ
			[[end]]		

			โดยในส่วนของการแสดงผลภาพจากกล้องที่ติดอยู่บนตัวรถผ่าน HTTP Streaming ทำการพัฒนาเพิ่มเติมจาก [[cite(ipcam-view)]] 
			ซึ่งได้ทำการตัดฟังชันน์การใช้งานบางส่วนออกไปเพื่อความเหมาะสมของงาน 

			[[image(PhoneControlUI):app/phcondes.jpg|width=0.5|caption=ภาพหน้าควบคุมรถโดย โทรศัพท์]]

			[[image(SimsetControlUI):app/simsetcondes.jpg|width=0.5|caption=ภาพหน้าควบคุมรถโดย ชุดควบคุม]]
			จากภาพ [[ref(SimsetControlUI)]] จะมีบางส่วนของการแสดงผลหายไป เหลือเพียงชุดปุ่มแสดงสถานะของเกียร์ และสวิตท์สำหรับเปลี่ยนโหมดควบคุม

	[[subsection: การออกแบบและพัฒนาแอพพลิเคชั่นแอนดรอย ]]
		ในส่วนของซอฟต์แวร์พัฒนาด้วยภาษาจาวา และมีไลบารี่ของ Android SDK ซึ่งตัวภาษาของจาวาเองนั้นเป็นภาษาเชิงวัตถุ( Object-oriented programming )โดยธรรมชาติอยู่แล้ว 
		จึงทำให้การพัฒนาอยู่บนฐานของ Object-oriented สามารถแยกออกเป็นโมดูลต่างๆได้ดังนี้

		[[image(ui_control):diagram/uicontrol.png|width=0.5|caption=รูปแบบในการรับค่าจากผู้ใช้แบบต่างๆ ]]

		[[subsubsection: User Interface(UI) ]]
			User Interface(UI) เป็นส่วนที่ผู้ใช้ควบคุมรถ และแสดงผลให้ผู้ใช้ผ่านทางหน้าจอ ซึ่งการแสดงผลสามารถดูได้จาก %[[ ref( การออกแบบ UX/UI) ]]
			ในส่วนของการรับค่าเพื่อนำไปประมวลผลนั้นมี 2 วิธี ได้แก่ การรับค่าจากส่วนตอบสนอง(UI)ผ่านหน้าจอสัมผัส และการอ่านค่าจากเซนเซอร์

		[[subsubsection: ส่วนของการทำงานเบื้องหลัง  ]]	
			คือส่วนที่ทำงานเบื้องหลังโดยผู้ใช้จะไม่สามารถรับรู้การทำงานได้ ยกเว้นมีการอัพเดท UI โดยจะแบ่งเป็น 3 ส่วน
			[[ulist]]
				# การส่งและรับข้อมูล(Data Comunication) ใช้ Socket Programing  เพื่อรับและส่งข้อมูลโดยส่วนนี้จะต้องทำการสร้างเธรด(Thread)ใหม่เพราะการพัฒนาแอพพลิเคชั่นบนแอนดรอยจะไม่สามารถเชื่อมต่อผ่าน Socket บนเธรดหลัก ซึ่งเธรดที่ต้องสร้างใหม่มีทั้งหมด 2 เธรดซึ่งสร้างมาเพื่อรองกับการติดต่อ 2 ช่องทาง คือพอร์ท 7769 และ 7789 
				# ส่วนประมวลผลข้อมูล(Processing) ทุกๆครั้งที่การ รับ-ส่งข้อมูล ข้อมูลนั้นจะมีการตรวจสอบและถูกสั่งงานผ่านส่วนนี้
				# ส่วนของการเก็บค่าคงที่(Constant) เป็น Static class เพื่อที่จะเก็บตัวแปรและนำไปใช้ในคลาสอื่นๆได้อย่างสะดวก
			[[end]]
	
[[section: การพัฒนารถจำลอง]]    
    เป็นการจำลองรถจากอัตราส่วนจริง 1 ต่อ 10 ภายในประกอบไปด้วย บอร์ด LinkIt Smart 7688 Duo 
    ซึ่งโปรแกรมด้วยภาษาไพธอนสั่งงาน Microcontroller ผ่านไลบารี่ pyFirmata 
    เป็นตัวควบอุปกรณ์ต่างๆได้แก่ มอเตอร์ และเซอร์โว โดยจะรับส่งข้อมูลผ่าน Socket Programming

	[[subsection: ส่วนของ Software]]
		ใช้ภาษาไพธอนในการพัฒนาโดยจะเรียกซอฟแวร์ทั้งหมดว่าเซิฟเวอร์และแยกส่วนการทำงานออกเป็นโมดูล ซึ่งมีโมดูลที่สำคัญดังต่อไปนี้

		[[subsubsection: Socket Controller]]
            เป็นส่วนที่ใช้ในการสื่อการกับ Client ทั้งหมด ไม่ว่าจะเป็นการรับ หรือส่งข้อมูล 
            โดยการรับข้อมูลจะมีการกรองข้อมูลที่ได้รับก่อนนำไปประมวลผล 
			และมีการส่งข้อมูลไปยังไคลแอนท์เมื่อมีเงื่อนไข เช่น สั่งให้แอพพลิเคชั่นอัพเดท UI บอกสถานะการเชื่อมต่อ 
			ตอบโต้เพื่อยืนยันการส่งข้อมูล เป็นต้น
		[[subsubsection: System Controller]]
			เป็นตัวกลางระหว่าง Socket Controller กับ Hardware Controller 
   	    	ใช้ในการเก็บ และอัพเดทค่าต่างๆ เช่น ความเร็ว มุมเลี้ยว เกียร์ปัจจุบัน โหมดปัจจุบันเป็นต้น 
   	    	ซึ่งค่าต่างๆจะได้มาจากการการประมวลผลข้อมูลที่รับมาจาก Socket Controller  
		[[subsubsection: Hardware Controller]]
        	ใช้ในการออกคำสั่งควบคุมอุปกรณ์ต่างๆซึ่งใช้ค่าดิจิตอลเพื่อสั่งงาน 
        	ได้แก่ มอเตอร์กระแสตรง และเซอร์โวมอเตอร์ทั้ง 2 ตัว
	[[image(CarCircuit):carmodel/Circuit.png|width=0.5|caption=ภาพการต่อวงจรบนรถจำลอง ]]

	[[subsection: ส่วนของฮาร์ดแวร์]]        
		ในส่วนของโครงรถจำลอง ได้ทำการดัดแปลงโครงรถเดิม โดยทำการออกแบบวงจรและอุปกรณ์ต่างๆเพื่อนำไปใส่ในโครงรถ 
		จากนั้นจึงนำชิ้นส่วนบางอย่างอย่างที่ไม่จำเป็นออกไป เพื่อเพิ่มพื้นที่ 
		ที่มีอยู่อย่างจำกัดให้เพียงพอต่ออุปกรณ์และวงจรที่นำไปวางใหม่
		
		[[image(originalCarModel):carmodel/originalcarmodel1.jpg|width=0.5|caption=ภาพรถแบบดั้งเดิม ]]
		ส่วนประกอบของรถจำลองมีดังนี้
		[[list]]
			# โครงรถจำลองประกอบด้วย
			[[ulist]]
				# กระจกข้าง ซ้ายขวา
				# กระจกมองหลัง
				# ล้อรถขนาด *** 4 ล้อ
			[[end]]
			# บอร์ด LinkIt smart 7688 duo 
			# วงจรจ่ายไฟ (H-bridge)
			# แบตเตอรี่ สำหรับจ่ายไฟให้ส่วนควบคุม
			# แบตเตอรี่ สำหรับจ่ายไฟให้บอร์ด
			# เซอร์โวมอเตอร์
			# มอเตอร์กระแสตรง
			# กล้องสำหรับถ่ายภาพเคลื่นไหว
		[[end]]
		
	    [[image(h-bridge):carmodel/hbcircuit.jpg|width=0.5|caption=วงจร H-bridge]]

		[[image(modifiedCarModel2):carmodel/modifiedcarmodel2.png|width=0.5|caption=ภาพรถจำลองเมื่อผ่านการดัดแปลงแล้ว ]]

\clearpage

[[section: ขั้นตอนการพัฒนาชุดขับ]]
	ชุดขับประกอบด้วยสามชิ้นคือ เกียร์ เบรคและคันเร่ง พวงมาลัย
	[[subsection: เกียร์]] 
		การรับค่าจากเกียร์ ใช้สวิตช์กดติดปล่อยดับติดบริเวณแนวรับคันโยกเมื่อคันโยกสัมผัสกับสวิตช์ จะส่งค่าไปยังบอร์ด บอร์ดอ่านค่าแบบดิจิตอลและประมวลผล เมื่อสวิตช์ติด ค่าที่อ่านได้จะนำไปเปรียบเทียบกับเกียร์ปัจจุบัน หากไม่ใช่เกียร์เดิมก็ส่งคำส่งไปยังตัวรถ –cg ตามด้วยเกียร์ 
		กลไกเกียร์ ใช้ก้ามปูมุ้งลวดในการล็อคแต่ละเกียร์เพื่อให้ความรู้สึกคล้ายเข้าเกียร์อยู่
		%[[image(gear):simulator-set/gear.jpg|width=0.5|caption=กล่อง gear]]

	[[subsection: เบรคและคันเร่ง]] 
	การรับค่าเบรคคันเร่ง ใช้ตัวต้านทานปรับค่าได้ เมื่อมีการเหยียบแบรคและคันเร่งจะได้ค่ามาที่บอร์ด บอร์ดอ่านค่าแบบอะนาล๊อคเพื่อประมวลผล โดยมีการกำหนดขอบเขตตัวต้านทานช่วงที่มีการใช้งาน min max หากค่าที่อ่านได้น้อยกว่าค่า min ก็จะถือว่าไม่มีการเหยียบ หากเกินก็จะถือว่าเหยียบ 100 เปอร์เซ็น ถ้าอยู่ในช่วงโปรแกรมก็จะทำการคำนวณว่าเหยียบเป็นค่ากี่เปอร์เซ็น เมื่อได้ค่าแล้วจะเทียบค่าเดิม หากค่ามีการเปลี่ยนแปลงจากเดิม จะส่งไปยังรถ โดยคำสั่ง a ตามด้วยค่าที่ส่ง เป็นคำสั่งเปลี่ยนเร่ง  b ตามด้วยค่าที่ส่ง เป็นคำสั่งเบรค
	กลไกเบรคคันเร่ง ใช้สปริงในการคืนตัวและมีแรงดีดมาที่เท้า เมื่อก้านเบรกและก้านคันเร่ง หมุน จะทำให้ไปผลักตัวต้านทานปรับค่าได้ให้หมุน
		%[[image(wheel):simulator-set/wheel.jpg|width=0.5|caption=เบร์ค คันเร่ง]]

	[[subsection: พวงมาลัย]] 
		การรับค่าพวงมาลัย ใช้ตัวต้านทานปรับค่าได้ เมื่อมีการหมุนพวงมาลัย จะได้ค่ามาที่บอร์ด บอร์ดอ่านค่าแบบอะนาล๊อคเพื่อคำนวณองศา โดยการคำนวณองศาแบ่งเป็นสองฝั่ง มีค่าอ้างอิงสามค่าคือ min mid max หากค่าที่อ่านได้อยู่ในช่วง min-mid แสดงว่าพวงมาลัยหมุนทวนเข็ม หากอยู่ระหว่าง mid-max แสดงว่าพวงมาลัยหมุนตามเข็ม หากค่ามีการเปลี่ยนแปลงจากเดิม จะส่งไปยังรถ โดยคำสั่ง t ตามด้วยค่าที่ส่ง 
		กลไกพวงมาลัย ก้านพวงมาลัยต่อเข้ากับเฟืองทดรอบเพื่อนำไปหมุนตัวต้านทานปรับค่าได้ การดีดกลับใช้แรงจากสปริง 
		%[[image(wheel):simulator-set/wheel.jpg|width=0.5|caption=เบร์ค คันเร่ง]]

		[[image(simsetCircuit):simset/Circuit.jpg|width=0.5|caption=ภาพการต่อ GPIO ของชุดขับจำลอง]]

\clearpage
[[section: ภาพรวมของโครงงาน]]

	[[subsection: การเชื่อมต่อ(Connection)]]
		ในขั้นตอนนี้จะถือว่าเป็นการเริ่มระบบ รถจำลองจะต้องเปิด Access Point เพื่อปล่อยสัญญาณให้ไคลแอนท์เข้ามาเชื่อมต่อ
		โดยเมื่อมีอุปกรณ์เข้ามาเชื่อต่อผ่าน WIFI แล้ว จะต้องทำการยืนยันตนเพื่อระบุตัวตนของอุปกรณ์นั้นๆ

		ซึ่งวิธีการระบุตัวตนมีขั้นตอนดังนี้
		[[list]]
		# ไคลแอนท์ทำการเชื่อมต่อกับเซิฟเวอร์ที่พอร์ท 7769
		# จากนั้นทำการส่งข้อความเพื่อรถบุตัวตน -a "ชื่อของอุปกรณ์"
		# เซิฟเวอร์ทำการตรวจสอบค่าที่ส่งเข้ามา
		# หากทำการระบุตัวตนสำเร็จ เซิฟเวอร์จะอนุญาติให้ไคลแอนท์ส่งคำสั่งเพื่อควบคุมรถได้
		[[end]]

	\clearpage
		[[image(AuthFlow): diagram/AuthCliServer.png|width=1|caption=Flow Chart แสดงกระบวนยืนตนของอุปกรณ์]]
	\clearpage


	[[subsection: การควบคุมรถ ]]

		[[subsubsection: ขั้นตอนและวิธีการ]]
			
			[[list]]
			# หลังจากที่อุปกรณ์ทำการยืนยันตัวตนแล้วจะสามารถส่งคำสั่งเพื่อควบคุมรถได้ 
			# โดยที่เซิฟเวอร์จะทำการสร้างเธรดเพื่อรอรับ-ส่งคำสั่งแบบ Non-Commnad จากพอร์ท 7789 และ พอร์ท 7769 ซึ่งเป็นพอร์ทสำหรับรับ-ส่งคำสั่งแบบ Command
			# เมื่อมีสมาร์ตโฟน และชุดขับเชื่อมต่อกับรถจพลองในระบบพร้อมกันจะถือว่าเป็น *ระบบการเชื่อมต่อที่สมบูรณ์* 
			# เซิฟเวอร์จะให้สิทธิ์กับไคลแอนท์ที่เชือมต่อก่อนเป็นตัวควบคุมรถ และสามารถสลับโหมดควบคุมได้โดยใช้สมาร์ตโฟน
			[[end]]

		[[subsubsection: การควบคุมความเร็วและการเลี้ยว ]]
			การควบคุมความเร็ว ข้อความที่ใช้ควบคุมความเร็วสามารถดูรูปแบบได้จาก [[ref(NoncommandTable)]] 
			หลักการทำงานคือตัวควบคุมจะส่งคำสั่งมายังเซฺฟเวอร์และจากนั้นเซิฟเวอร์จะทำการแยกคำเพื่อหาเป็นส่วนหัวกับหางซึ่งจะนำส่วนหัวไปวิเคราะห์เพื่อส่วนหางเข้าฟังชันน์ที่รองรับการทำงาน
			
			%อธิบายการคำนวณความเร็ว 

			%อธิบายการบังคับมุมเลี้ยว


		[[subsubsection: การควบคุมกล้อง]]
			กล้องที่ติดอยู่บนตัวรถสามารถควบคุมทิศทางได้เฉพาะซ้ายและขวาเท่านั้น โดยข้อความที่ใช้ควบคุมมุมกล้องคือ -ccp [มุมกล้อง 0-180 องศา] และ -cc [ความเร็วเชิงมุม(omega) 0-1 rad/s]
			โดยที่ทั้งสองคำสั่งเป็นคำสั่งที่ใช้ในการควบคุมมุมก้ลองเหมือนกัน แต่แตกต่างกันที่ *-ccp* เป็นคำสั่งในโหมดควบคุมด้วยมือถือ ซึ่งผู้ใช้จะต้องสไลด์ปุ่มเพื่อควบคุมทิศทางซึ่งมีค่าระหว่าง 0-180 
			ส่วน -cc เป็นการควบคุมกล้องในโหมดชุดขับจำลอง ซึ่งผู้ใช้จะต้องใส่แว่น VR ทำให้ต้องควบคุมกล้องด้วยการหันศีรษะไปมา ซึ่งการหันศีรษะจะทำให้เกิดความเร็วเชิงมุม(oemga)จากการตรวจจับผ่านเซ็นเซอร์
			ในอุปกรณ์สมาร์ตโฟนแอนดรอย มีค่าระหว่าง 0-1 เป็นเลขทศนิยมสามตำแหน่ง

		[[subsubsection: การเปลี่ยนโหมดควบคุม]]
			การเปลี่ยนโหมดจะทำได้ก็ต่อเมื่อมีชุดขับจำลอง และอุปกรณ์สมาร์ตโฟนเชื่อมต่อกับรถจำลอง โดยวิธีการเปลี่ยนโหมดทำได้โดยกดปุ่มสวิทต์ จากภาพ [[ref(phcondes)]]
			ซึ่งหากเปลี่ยนโหมดสำเร็จส่วนของ UI จะตอบสนองโดยลักษณะของปุ่มจะเปลี่ยนไปหลังกด และพื้นหลังจะเปลี่ยนตามด้วยเช่นกัน

			โดยที่คำสั่งในการเปลี่ยนโหมดคือ -cm [ตามด้วยโหมดที่ต้องการเปลี่ยน] โดยที่โทรศัพ์สมาร์ตโฟนจะเป็นผู้สั่งคำสั่งนี้ได้เท่านั้น และหากเปลี่ยนโหมดสำเร็จ
			เซิฟเวอร์ก็จะทำการตอบกลับเพื่อให้แอพพลิเคชั่นอัพเดท UI 

			[[image(uiChangeMode02):app/simcon.jpg|width=0.5|caption=UI เมื่ออยู่ในโหมดควบคุมผ่านชุดขับจำลอง]]

		[[subsubsection: การเปลี่ยนเกียร์]]
			การเปลี่ยนเกียร์สามารถทำได้สองวิธีคือเปลี่ยนจากสมาร์ตโฟนและจากเกียร์ในชุดขับ รูปแบบของคำสั่งคือ -cg [N, D, R, P]  
			ซึ่งเมื่อตัวควบคุมส่งการร้องขอไปยังเซิฟเวอร์ในรูปแบบข้อความ ตัวเซิฟเวอร์จะทำการประมวลผลและหากการเปลี่ยนเกียร์สำเร็จเซิฟเวอร์จะส่งข้อความเดิมไปยังสมาร์ตโฟน
			เพื่อยืนยันคำสั่งและให้สมาร์ตโฟนทำการอัพเดท UI







